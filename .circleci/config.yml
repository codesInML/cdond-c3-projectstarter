version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
       
    steps:
      - run:
          name: Destroy environments << parameters.workflow-id >>
          when: on_fail
          command: |
            echo "Destroying environments << parameters.workflow-id >>"
            aws s3 rm s3://udapeople-<< parameters.workflow-id >> --recursive
            aws cloudformation delete-stack --stack-name stack-create-server-<< parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name stack-create-bucket-<< parameters.workflow-id >>
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="kk1j287"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/KJSJZRo8dWiaLqQCqM7XbC/migration_<< parameters.workflow-id >>)
            if [ "$SUCCESS"=="1" ]; 
            then
              ls -la
              cd ~/project/backend
              npm install
              npm run migrations:revert > migrations.txt
              cat ~/project/backend/migrations.txt
            fi
  
  job_failure_notifier:
    steps:
      - slack/notify:
          event: fail
          channel: ci-cd-pipeline
          template: basic_fail_1
  
  job_success_notifier:
    steps:
      - slack/notify:
          event: pass
          channel: ci-cd-pipeline
          template: success_target_deployment_1

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 

  install_ansible:
    description: Install AWS ansible
    steps:
      - run:
          name: Install AWS ansible
          command: |
            sudo apt update
            sudo apt install -y python3 python3-pip
            python3 -m pip install --user ansible
            # software-properties-common -y
            # sudo add-apt-repository --yes --update ppa:ansible/ansible
            # sudo apt install ansible -y 

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - job_failure_notifier

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - job_failure_notifier

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm i
            npm run test
      - job_failure_notifier
         
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm i
            npm run test
      - job_failure_notifier
         
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - job_failure_notifier

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - job_failure_notifier

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project=udapeople \
              --stack-name stack-create-server-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Project=udapeople \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - job_failure_notifier

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["32:fd:1d:b2:91:34:3b:30:fa:39:2c:9a:df:ca:91:d6"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - job_failure_notifier    

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            ls -a
            cd backend
            npm i
            npm run migrations > migrations.txt
      - run:
          name: Send migration results to KVDB
          command: |
            cat ~/project/backend/migrations.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations.txt
            then
              curl "https://kvdb.io/KJSJZRo8dWiaLqQCqM7XbC/migration_${CIRCLE_WORKFLOW_ID:0:7}"  -d '1'
            fi
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"      
      - job_failure_notifier 

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            ls -a
            cat .env
            echo "Printed out .env file ---------------------------"
            npm i
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - job_failure_notifier
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["32:fd:1d:b2:91:34:3b:30:fa:39:2c:9a:df:ca:91:d6"]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            # mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml -v
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - job_failure_notifier

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - attach_workspace:
          at: ~/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              echo ${URL}
              return 1
            else
              return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --output text)
            echo "${BACKEND_IP}"  
            # Fetch and prepare the BACKEND_IP env var
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - job_failure_notifier

  cloudfront-update:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: save old workflow ID to kvdb.io 
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo "old workflow ID is: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/KJSJZRo8dWiaLqQCqM7XbC/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update Cloudfront 
          command:  |
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - job_failure_notifier

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/KJSJZRo8dWiaLqQCqM7XbC/old_workflow_id) 
            echo "$OldWorkflowID"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3api list-buckets --query "Buckets[].Name"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "stack-create-server-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "stack-create-bucket-${OldWorkflowID}"
            fi

      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - job_failure_notifier
      - job_success_notifier

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]